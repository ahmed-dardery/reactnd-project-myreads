{"version":3,"sources":["utils/BooksAPI.js","BookShelfChanger.js","BookBox.js","LoadingIcon.js","BookGrid.js","BookShelf.js","Library.js","SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","BookShelfChanger","_this$props","this","props","onChange","shelvesList","selected","react_default","a","createElement","className","value","event","target","disabled","map","key","shelfID","shelfTitle","React","Component","BookBox","onShelfChange","_props$book","title","authors","imageLinks","thumbnail","style","width","height","backgroundImage","src_BookShelfChanger","join","LoadingIcon","viewBox","cx","cy","r","fill","stroke","strokeWidth","BookGrid","shelves","onBookShelfChange","customEmptyMessage","loading","SortedBooks","sort","b","localeCompare","src_LoadingIcon_0","length","src_BookBox","BookShelf","src_BookGrid","filter","Library","system","hidden","src_BookShelf","react_router_dom","to","SearchBooks","state","_this","setState","clearTimeout","queryTimeOut","setTimeout","trim","BooksAPI","ret","error","_this2","type","placeholder","BooksApp","prevState","cur","find","v","toConsumableArray","_this3","react_router","exact","path","render","src_Library","src_SearchBooks","reduce","acc","defineProperty","ReactDOM","basename","process","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.24b86110.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token;\r\nif (!token)\r\n    token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n    'Accept': 'application/json',\r\n    'Authorization': token\r\n};\r\n\r\nexport const get = (bookId) =>\r\n    fetch(`${api}/books/${bookId}`, {headers})\r\n        .then(res => res.json())\r\n        .then(data => data.book);\r\n\r\nexport const getAll = () =>\r\n    fetch(`${api}/books`, {headers})\r\n        .then(res => res.json())\r\n        .then(data => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n    fetch(`${api}/books/${book.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({shelf})\r\n    }).then(res => res.json());\r\n\r\nexport const search = (query) =>\r\n    fetch(`${api}/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({query})\r\n    }).then(res => res.json())\r\n        .then(data => data.books);\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BookShelfChanger extends React.Component {\r\n\r\n    render() {\r\n        const {onChange, shelvesList} = this.props;\r\n        let {selected} = this.props;\r\n        selected = selected || 'none';\r\n        const YES_MARK = '✔', NO_MARK = '　 ';\r\n        return (\r\n            <div className=\"book-shelf-changer\">\r\n                <select value={selected}\r\n                        onChange={(event) => onChange(event.target.value)}>\r\n                    <option value=\"move\" disabled>Move to...</option>\r\n                    {\r\n                        shelvesList.map(shelf =>\r\n                            <option key={shelf.shelfID} value={shelf.shelfID}>\r\n                                {`${shelf.shelfID === selected ? YES_MARK : NO_MARK} ${shelf.shelfTitle}`}\r\n                            </option>\r\n                        )\r\n                    }\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nBookShelfChanger.propTypes = {\r\n    selected: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default BookShelfChanger;","import React from 'react';\r\nimport BookShelfChanger from \"./BookShelfChanger\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BookBox = (props) => {\r\n    const {shelf, onShelfChange, shelvesList} = props;\r\n    const {title, authors} = props.book;\r\n    const {imageLinks} = props.book;\r\n    const thumbnail = imageLinks ? imageLinks.thumbnail : '';\r\n\r\n    return (\r\n        <div className=\"book\">\r\n            <div className=\"book-top\">\r\n                <div className=\"book-cover\" style={{width: 128, height: 200, 'backgroundImage': `url(${thumbnail})`}}/>\r\n                <BookShelfChanger shelvesList={shelvesList} selected={shelf || 'none'} onChange={onShelfChange}/>\r\n            </div>\r\n            <div className=\"book-title\">{title}</div>\r\n            <div className=\"book-authors\">{authors && authors.join(', ')}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nBookBox.propTypes = {\r\n    shelf: PropTypes.string,\r\n    onShelfChange: PropTypes.func.isRequired,\r\n    book: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        authors: PropTypes.array,\r\n        imageLinks: PropTypes.shape({\r\n            thumbnail: PropTypes.string.isRequired\r\n        })\r\n    }).isRequired,\r\n    shelvesList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default BookBox;","import React from \"react\";\r\nimport './LoadingIcon.css';\r\n\r\nconst LoadingIcon = () => {\r\n    return (\r\n        <div className=\"loading-icon\">\r\n            <svg viewBox=\"0 0 50 50\">\r\n                <circle className=\"loading-icon-circle\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke=\"#60ac5d\" strokeWidth=\"2\"/>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingIcon;","import React from 'react';\r\nimport BookBox from \"./BookBox\";\r\nimport PropTypes from \"prop-types\";\r\nimport LoadingIcon from \"./LoadingIcon\";\r\n\r\nconst BookGrid = (props) => {\r\n    const {shelf, shelves, onBookShelfChange, shelvesList, customEmptyMessage, loading} = props;\r\n\r\n    let SortedBooks = props.books || [];\r\n    SortedBooks.sort((a, b) => a.title.localeCompare(b.title));\r\n\r\n    if (loading)\r\n        return <LoadingIcon/>;\r\n    else\r\n        return (\r\n            <ol className=\"books-grid\">\r\n                {SortedBooks.length === 0 ?\r\n                    <div className=\"books-grid-empty\">{customEmptyMessage || `Phew, looks a bit too empty!`}</div> :\r\n                    SortedBooks.map(book =>\r\n                        <li key={book.id}>\r\n                            <BookBox shelvesList={shelvesList} onShelfChange={(value) => onBookShelfChange(book, value)}\r\n                                     shelf={shelf || shelves[book.id]}\r\n                                     book={book}/>\r\n                        </li>\r\n                    )}\r\n            </ol>\r\n        );\r\n};\r\n\r\nBookGrid.propTypes = {\r\n    books: PropTypes.array,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelf: PropTypes.string,\r\n    shelves: PropTypes.object,\r\n    shelvesList: PropTypes.array.isRequired,\r\n    customEmptyMessage: PropTypes.string,\r\n};\r\nexport default BookGrid;","import React, {Component} from 'react';\r\nimport BookGrid from './BookGrid'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BookShelf extends Component {\r\n    render() {\r\n        const {shelf, books, onBookShelfChange, shelvesList, loading} = this.props;\r\n\r\n        return (\r\n            <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">{shelf.shelfTitle}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                    <BookGrid loading={loading} shelvesList = {shelvesList} onBookShelfChange={onBookShelfChange} shelf={shelf.shelfID}\r\n                              books={books.filter(book => book.shelf === shelf.shelfID)}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nBookShelf.propTypes = {\r\n    shelf: PropTypes.shape({\r\n        shelfID: PropTypes.string,\r\n        shelfTitle: PropTypes.string,\r\n    }).isRequired,\r\n    books: PropTypes.array.isRequired,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired,\r\n    loading: PropTypes.bool,\r\n};\r\n\r\nexport default BookShelf;","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport BookShelf from \"./BookShelf\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass Library extends Component {\r\n    render() {\r\n        const {books, onBookShelfChange, shelvesList, loading} = this.props;\r\n        return (<div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n                <h1>My Reads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n                <div>\r\n                    {shelvesList.map(shelf => !shelf.system && !shelf.hidden && <BookShelf loading={loading} shelvesList={shelvesList} key={shelf.shelfID} onBookShelfChange={onBookShelfChange}\r\n                                                          books={books} shelf={shelf}/>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n                <Link className=\"open-search-button\" to=\"/search\">Add a book</Link>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nLibrary.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired,\r\n    loading: PropTypes.bool\r\n};\r\n\r\nexport default Library;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport BookGrid from \"./BookGrid\";\r\nimport * as BooksAPI from \"./utils/BooksAPI\";\r\n\r\nclass SearchBooks extends Component {\r\n    state = {\r\n        query: '',\r\n        books: [],\r\n        loading: false\r\n    };\r\n    onChange = (query) => {\r\n        this.setState(() => ({query, loading: true}));\r\n        clearTimeout(this.queryTimeOut);\r\n        this.queryTimeOut = setTimeout(() => this.search(query.trim()), 500);\r\n    };\r\n    search = (query) => {\r\n        query ? BooksAPI.search(query).then((ret) =>\r\n            this.setState({books: ret.error ? [] : ret, loading: false})\r\n        ) : this.setState({books: [], loading: false})\r\n    };\r\n\r\n    render() {\r\n        const {shelves, onBookShelfChange, shelvesList} = this.props;\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to='/' className=\"close-search\">Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input onChange={event => this.onChange(event.target.value)} type=\"text\"\r\n                               placeholder=\"Search by title or author\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <BookGrid loading = {this.state.loading} customEmptyMessage={!this.state.loading && this.state.query.trim().length===0?\" \":\"No books found!\"} shelvesList ={shelvesList} shelves={shelves} books={this.state.books} onBookShelfChange={onBookShelfChange}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nSearchBooks.propTypes = {\r\n    shelves: PropTypes.object.isRequired,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired\r\n\r\n};\r\n\r\nexport default SearchBooks;","import React from 'react'\r\nimport './App.css'\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\nimport * as BooksAPI from './utils/BooksAPI'\r\n\r\nimport Library from \"./Library\";\r\nimport SearchBooks from \"./SearchBooks\";\r\n\r\nclass BooksApp extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        books: [],\r\n        shelves: [],\r\n        shelvesList: [\r\n            {\r\n                shelfID: 'currentlyReading',\r\n                shelfTitle: 'Currently Reading'\r\n            },\r\n            {\r\n                shelfID: 'wantToRead',\r\n                shelfTitle: 'Want to Read'\r\n            },\r\n            {\r\n                shelfID: 'read',\r\n                shelfTitle: 'Read'\r\n            },\r\n            /*{\r\n                shelfID: 'favorite',\r\n                shelfTitle: 'Favorites'\r\n            },*/\r\n            {\r\n                shelfID: 'none',\r\n                shelfTitle: 'None',\r\n                system: true,\r\n            }\r\n        ]\r\n    };\r\n\r\n    componentDidMount() {\r\n        BooksAPI.getAll().then((books) => {\r\n            this.setState({books, loading: false})\r\n        });\r\n    }\r\n\r\n    onBookShelfChange = (book, shelf) => {\r\n        book.shelf = shelf;\r\n\r\n        this.setState(prevState => {\r\n            let cur = prevState.books.find(v => v.id === book.id);\r\n            if (cur) {\r\n                cur.shelf = shelf;\r\n                return prevState;\r\n            } else\r\n                return {books: [...prevState.books, book]};\r\n        });\r\n        BooksAPI.update(book, shelf);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app\">\r\n                <Switch>\r\n                    <Route exact path=\"/\"\r\n                           render={() =>\r\n                               <Library loading={this.state.loading} shelvesList={this.state.shelvesList}\r\n                                        onBookShelfChange={this.onBookShelfChange} books={this.state.books}/>\r\n                           }/>\r\n                    <Route path=\"/search\"\r\n                           render={() =>\r\n                               <SearchBooks shelvesList={this.state.shelvesList} shelves={\r\n                                   this.state.books.reduce((acc, cur) => ({...acc, [cur.id]: cur.shelf}), {})\r\n                               } onBookShelfChange={this.onBookShelfChange}/>\r\n                           }/>\r\n                    <Route render={()=><div>404 Page Not Found!</div>}/>\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n//import registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'))\r\n\r\n//registerServiceWorker.register();"],"sourceRoot":""}