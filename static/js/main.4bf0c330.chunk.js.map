{"version":3,"sources":["utils/BooksAPI.js","BookShelfChanger.js","BookView.js","LoadingIcon.js","BookGrid.js","BookShelf.js","Library.js","SearchBooks.js","DetailedBookView.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","BookShelfChanger","React","Component","render","this","props","onChange","shelvesList","selected","className","value","event","target","disabled","map","shelf","key","shelfID","shelfTitle","BookView","onShelfChange","book","title","authors","imageLinks","thumbnail","replace","to","search","id","style","join","LoadingIcon","viewBox","cx","cy","r","fill","stroke","strokeWidth","BookGrid","shelves","onBookShelfChange","customEmptyMessage","loading","SortedBooks","books","sort","a","b","localeCompare","length","BookShelf","filter","Library","system","hidden","SearchBooks","state","query","setState","clearTimeout","queryTimeOut","setTimeout","trim","fetch","method","body","JSON","stringify","then","res","json","data","BooksAPI","ret","error","type","placeholder","DetailedBookView","componentDidMount","bookID","bookId","catch","goBack","onClick","subtitle","categories","averageRating","ratingsCount","pageCount","description","BooksApp","prevState","cur","find","v","history","location","URLSearchParams","get","push","pathname","exact","path","reduce","acc","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.4bf0c330.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token;\r\nif (!token)\r\n    token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n    'Accept': 'application/json',\r\n    'Authorization': token\r\n};\r\n\r\nexport const get = (bookId) =>\r\n    fetch(`${api}/books/${bookId}`, {headers})\r\n        .then(res => res.json())\r\n        .then(data => data.book);\r\n\r\nexport const getAll = () =>\r\n    fetch(`${api}/books`, {headers})\r\n        .then(res => res.json())\r\n        .then(data => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n    fetch(`${api}/books/${book.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({shelf})\r\n    }).then(res => res.json());\r\n\r\nexport const search = (query) =>\r\n    fetch(`${api}/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n            ...headers,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({query})\r\n    }).then(res => res.json())\r\n        .then(data => data.books);\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BookShelfChanger extends React.Component {\r\n\r\n    render() {\r\n        const {onChange, shelvesList} = this.props;\r\n        let {selected} = this.props;\r\n        selected = selected || 'none';\r\n        const YES_MARK = '✔', NO_MARK = '　 ';\r\n        return (\r\n            <div className=\"book-shelf-changer\">\r\n                <select value={selected}\r\n                        onChange={(event) => onChange(event.target.value)}>\r\n                    <option value=\"move\" disabled>Move to...</option>\r\n                    {\r\n                        shelvesList.map(shelf =>\r\n                            <option key={shelf.shelfID} value={shelf.shelfID}>\r\n                                {`${shelf.shelfID === selected ? YES_MARK : NO_MARK} ${shelf.shelfTitle}`}\r\n                            </option>\r\n                        )\r\n                    }\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nBookShelfChanger.propTypes = {\r\n    selected: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default BookShelfChanger;","import React from 'react';\r\nimport BookShelfChanger from \"./BookShelfChanger\";\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst BookView = (props) => {\r\n    const {shelf, onShelfChange, shelvesList} = props;\r\n    const {title, authors} = props.book;\r\n    const {imageLinks} = props.book;\r\n    const thumbnail = imageLinks ? imageLinks.thumbnail.replace('http://','https://') : '';\r\n\r\n    return (\r\n        <div className=\"book\">\r\n            <div className=\"book-top\">\r\n                <Link to={{search: `?book=${props.book.id}`}}><div className=\"book-cover\" style={{'backgroundImage': `url(${thumbnail})`}}/></Link>\r\n                <BookShelfChanger shelvesList={shelvesList} selected={shelf || 'none'} onChange={onShelfChange}/>\r\n            </div>\r\n            <div className=\"book-title\">{title}</div>\r\n            <div className=\"book-authors\">{authors && authors.join(', ')}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nBookView.propTypes = {\r\n    shelf: PropTypes.string,\r\n    onShelfChange: PropTypes.func.isRequired,\r\n    book: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        authors: PropTypes.array,\r\n        imageLinks: PropTypes.shape({\r\n            thumbnail: PropTypes.string.isRequired\r\n        })\r\n    }).isRequired,\r\n    shelvesList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default BookView;","import React from \"react\";\r\nimport './LoadingIcon.css';\r\n\r\nconst LoadingIcon = () => {\r\n    return (\r\n        <div className=\"loading-icon-holder\">\r\n        <div className=\"loading-icon\">\r\n            <svg viewBox=\"0 0 50 50\">\r\n                <circle className=\"loading-icon-circle\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke=\"#60ac5d\" strokeWidth=\"2\"/>\r\n            </svg>\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingIcon;","import React from 'react';\r\nimport BookView from \"./BookView\";\r\nimport PropTypes from \"prop-types\";\r\nimport LoadingIcon from \"./LoadingIcon\";\r\n\r\nconst BookGrid = (props) => {\r\n    const {shelf, shelves, onBookShelfChange, shelvesList, customEmptyMessage, loading} = props;\r\n\r\n    let SortedBooks = props.books || [];\r\n    SortedBooks.sort((a, b) => a.title.localeCompare(b.title));\r\n\r\n    if (loading)\r\n        return <LoadingIcon/>;\r\n    else\r\n        return (\r\n            <ol className=\"books-grid\">\r\n                {SortedBooks.length === 0 ?\r\n                    <div className=\"books-grid-empty\">{customEmptyMessage || `Phew, looks a bit too empty!`}</div> :\r\n                    SortedBooks.map(book =>\r\n                        <li key={book.id}>\r\n                            <BookView shelvesList={shelvesList} onShelfChange={(value) => onBookShelfChange(book, value)}\r\n                                      shelf={shelf || shelves[book.id]}\r\n                                      book={book}/>\r\n                        </li>\r\n                    )}\r\n            </ol>\r\n        );\r\n};\r\n\r\nBookGrid.propTypes = {\r\n    books: PropTypes.array,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelf: PropTypes.string,\r\n    shelves: PropTypes.object,\r\n    shelvesList: PropTypes.array.isRequired,\r\n    customEmptyMessage: PropTypes.string,\r\n};\r\nexport default BookGrid;","import React, {Component} from 'react';\r\nimport BookGrid from './BookGrid'\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BookShelf extends Component {\r\n    render() {\r\n        const {shelf, books, onBookShelfChange, shelvesList, loading} = this.props;\r\n\r\n        return (\r\n            <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">{shelf.shelfTitle}</h2>\r\n                <div className=\"bookshelf-books\">\r\n                    <BookGrid loading={loading} shelvesList = {shelvesList} onBookShelfChange={onBookShelfChange} shelf={shelf.shelfID}\r\n                              books={books.filter(book => book.shelf === shelf.shelfID)}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nBookShelf.propTypes = {\r\n    shelf: PropTypes.shape({\r\n        shelfID: PropTypes.string,\r\n        shelfTitle: PropTypes.string,\r\n    }).isRequired,\r\n    books: PropTypes.array.isRequired,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired,\r\n    loading: PropTypes.bool,\r\n};\r\n\r\nexport default BookShelf;","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport BookShelf from \"./BookShelf\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Library extends Component {\r\n\r\n    render() {\r\n        const {books, onBookShelfChange, shelvesList, loading} = this.props;\r\n        return (<div>\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>My Reads</h1>\r\n                </div>\r\n                <div className=\"list-books-content\">\r\n                    <div>\r\n                        {shelvesList.map(shelf => !shelf.system && !shelf.hidden &&\r\n                            <BookShelf loading={loading} shelvesList={shelvesList} key={shelf.shelfID}\r\n                                       onBookShelfChange={onBookShelfChange}\r\n                                       books={books} shelf={shelf}/>)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"open-search\">\r\n                    <Link className=\"open-search-button\" to=\"/search\">Add a book</Link>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nLibrary.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired,\r\n    loading: PropTypes.bool,\r\n    query: PropTypes.string,\r\n    history: PropTypes.shape({\r\n        push: PropTypes.func.isRequired\r\n    }).isRequired\r\n};\r\n\r\nexport default Library;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport BookGrid from \"./BookGrid\";\r\nimport * as BooksAPI from \"./utils/BooksAPI\";\r\n\r\nclass SearchBooks extends Component {\r\n    state = {\r\n        query: '',\r\n        books: [],\r\n        loading: false\r\n    };\r\n    onChange = (query) => {\r\n        this.setState(() => ({query, loading: true}));\r\n        clearTimeout(this.queryTimeOut);\r\n        this.queryTimeOut = setTimeout(() => this.search(query.trim()), 500);\r\n    };\r\n    search = (query) => {\r\n        query ? BooksAPI.search(query).then((ret) =>\r\n            this.setState({books: ret.error ? [] : ret, loading: false})\r\n        ) : this.setState({books: [], loading: false})\r\n    };\r\n\r\n    render() {\r\n        const {shelves, onBookShelfChange, shelvesList} = this.props;\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to='/' className=\"close-search\">Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input onChange={event => this.onChange(event.target.value)} type=\"text\"\r\n                               placeholder=\"Search by title or author\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <BookGrid loading = {this.state.loading} customEmptyMessage={!this.state.loading && this.state.query.trim().length===0?\" \":\"No books found!\"} shelvesList ={shelvesList} shelves={shelves} books={this.state.books} onBookShelfChange={onBookShelfChange}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nSearchBooks.propTypes = {\r\n    shelves: PropTypes.object.isRequired,\r\n    onBookShelfChange: PropTypes.func.isRequired,\r\n    shelvesList: PropTypes.array.isRequired\r\n\r\n};\r\n\r\nexport default SearchBooks;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as BooksAPI from \"./utils/BooksAPI\";\r\nimport LoadingIcon from \"./LoadingIcon\";\r\n\r\nclass DetailedBookView extends React.Component {\r\n    state = {\r\n        book: {},\r\n        loading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {bookID} = this.props;\r\n        BooksAPI.get(bookID).then((book) => {\r\n            this.setState({book, loading: false});\r\n        }).catch(() => this.props.goBack());\r\n    }\r\n\r\n    render() {\r\n        const {goBack} = this.props;\r\n        const {book, loading} = this.state;\r\n\r\n        const {imageLinks} = book;\r\n        const thumbnail = imageLinks ? imageLinks.thumbnail.replace('http://', 'https://') : '';\r\n        return (\r\n            <div>\r\n                <div onClick={() => goBack()} className=\"book-details-background\"/>\r\n                <div className=\"book-details-box\">\r\n                    {loading ?   <div className=\"book-details\"><LoadingIcon/></div> :\r\n                        <div className=\"book-details\">\r\n                            <div className=\"book-details-top\">\r\n                                <div className=\"book-top\">\r\n                                    <div className=\"book-cover\"\r\n                                         style={{'backgroundImage': `url(${thumbnail})`}}/>\r\n                                </div>\r\n                                <div className=\"book-details-info\">\r\n                                    <b><div className=\"book-title\">{book.title}</div></b>\r\n                                    <div className=\"book-subtitle\">{book.subtitle}</div>\r\n                                    <div className=\"book-authors\">{book.authors && book.authors.join(', ')}</div>\r\n                                    {book.categories && <div className=\"book-title\">Category: {book.categories.join(', ')}</div>}\r\n                                    {book.averageRating && <div className=\"book-title\">Rating: {`${book.averageRating} stars - ${book.ratingsCount} rating(s)`}</div>}\r\n                                    {book.pageCount && <div className=\"book-title\">{book.pageCount} Pages</div>}\r\n                                </div>\r\n                            </div>\r\n                            {book.description && <div>\r\n                                <h2>Description</h2>\r\n                                {book.description};\r\n                            </div>}\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDetailedBookView.propTypes = {\r\n    goBack: PropTypes.func.isRequired,\r\n    bookID: PropTypes.string.isRequired,\r\n};\r\nexport default DetailedBookView;","import React from 'react'\r\nimport './App.css'\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\nimport * as BooksAPI from './utils/BooksAPI'\r\n\r\nimport Library from \"./Library\";\r\nimport SearchBooks from \"./SearchBooks\";\r\nimport DetailedBookView from \"./DetailedBookView\";\r\n\r\nclass BooksApp extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        books: [],\r\n        shelves: [],\r\n        shelvesList: [\r\n            {\r\n                shelfID: 'currentlyReading',\r\n                shelfTitle: 'Currently Reading'\r\n            },\r\n            {\r\n                shelfID: 'wantToRead',\r\n                shelfTitle: 'Want to Read'\r\n            },\r\n            {\r\n                shelfID: 'read',\r\n                shelfTitle: 'Read'\r\n            },\r\n            /*{\r\n                shelfID: 'favorite',\r\n                shelfTitle: 'Favorites'\r\n            },*/\r\n            {\r\n                shelfID: 'none',\r\n                shelfTitle: 'None',\r\n                system: true,\r\n            }\r\n        ]\r\n    };\r\n\r\n    componentDidMount() {\r\n        BooksAPI.getAll().then((books) => {\r\n            this.setState({books, loading: false})\r\n        });\r\n    }\r\n\r\n    onBookShelfChange = (book, shelf) => {\r\n        book.shelf = shelf;\r\n\r\n        this.setState(prevState => {\r\n            let cur = prevState.books.find(v => v.id === book.id);\r\n            if (cur) {\r\n                cur.shelf = shelf;\r\n                return prevState;\r\n            } else\r\n                return {books: [...prevState.books, book]};\r\n        });\r\n        BooksAPI.update(book, shelf);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"app\">\r\n                <Route render={({history, location}) => {\r\n                    const test = new URLSearchParams(location.search);\r\n                    const query = test.get(\"book\");\r\n                    return query && <DetailedBookView goBack={()=>history.push(location.pathname)} bookID={query}/>;\r\n                }}/>\r\n                <Switch>\r\n                    <Route exact path=\"/\"\r\n                           render={({location, history}) =>\r\n                               <Library history={history} query={location.search} loading={this.state.loading}\r\n                                        shelvesList={this.state.shelvesList}\r\n                                        onBookShelfChange={this.onBookShelfChange} books={this.state.books}/>\r\n                           }>\r\n                    </Route>\r\n                    <Route exact path=\"/search\"\r\n                           render={() =>\r\n                               <SearchBooks shelvesList={this.state.shelvesList} shelves={\r\n                                   this.state.books.reduce((acc, cur) => ({...acc, [cur.id]: cur.shelf}), {})\r\n                               } onBookShelfChange={this.onBookShelfChange}/>\r\n                           }/>\r\n                    <Route render={() => <div>404 Page Not Found!</div>}/>\r\n                </Switch>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'))"],"sourceRoot":""}